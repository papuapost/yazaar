#summary DataForm - Developer's Walkthrough (Issue 4)

|| augment || On script processing, before an instance of the class can be created, the class is augmented by the !EventProvider, so that events can be subscribed and fired by name.  ||
|| construct || Constructor is passed a HTML Element, !ColumnSet, !DataSource, and an optional configuration object. ||
|| identify || A unique index (_nIndex) and name for the instance (_sName) is created by taking the value of a counter (nCount) and prepending "instance". At the completion of the construction, the counter is incremented at class-scope. ||
|| configure ||The configuration object, if any, is read. Any properties set on the configuration object are set to the new object. Declared properties, like summary and caption, can be set, and an arbitrary property can be set too. A common configuration item is a related DataTable instance (!oDataTable). ||
|| validate || The !DataSource and !ColumnSet objects are verified to be instances of the appropriate object types. An invalid datasource is ignored. An invalid !ColumnSet causes the constructor to return (undefined). If the container element is not a div element, the constructor returns (undefined). In the debug version, validation errors are logged. ||
|| adopt || If a valid DataTable instance is passed via the configuration object, its RecordSet is shared. Otherwise, an empty RecordSet is created. In the debug version, the RecordSet status is logged. |
|| enhance markup || Markup enhancement is not supported by this version of !DataForm. ||
|| initialize (initForm) || When enhanced markup is not available, the form element is appended to the container passed to the constructor. A table is created within the form. If the summary or caption were set via the configuration object, corresponding elements are created within the table. ||
|| initialize (initHead) || The head row is generated by creating a tr element, th element, and td element from the column set for each "column". The th element is the field label, and the td element holds the input control. The input control is given the same name as the column, and a reference to each input element is added to the fields array in columnset "tree" order. || 
|| initialize (messages) || Since the body text has not been acquired, the initForm method creates a message row for the loading message as the tbody element. A second body element is added for the data entry controls - submit and cancel. ||
|| acquire data  || The constructor passes the datasource a request for the initialRequest data, and passes the onDataReturnPopulateRows  callback function. ||
|| create events || To enable state-change listeners, custom events are raised for checkboxClick and radioClick. Other custom events raised include tableInitEvent, tableForucEvent, dataReturnEvent, cellFormEvent, selectEvent, unselectEvent, recordSetUpdateEvent, recordSetDeleteEvent. The constructor automatically subscribes its own !RecordSet to the recordSet events (update and delete). ||
|| || NOTE: recordSetDelete is patch not found in the original build. See SF #1671022. ||
|| return || The constructer increments the {{{_nCount}}} property for the class, and raises the tableInitEvent. Since this is a constructor, the system returns the "this" !DataForm instance, and the method ends. ||
|| request || Meanwhile, the !DataSource request will obtain the raw data from a static array, a function or the connnection manager, parse out the fields indicated by the column set, and invoke the callback method, namely onDataReturnPopulateForm. ||
|| callback || Back in the !DataForm instance, onDataReturnPopulateForm, invokes a hook method, doBeforeLoadData, and then calls the !RecordSet populateForm method to fetch the data from the !DataSource response. || 
|| generate body || With the new data in place, the populateForm method is called to generate the body of the table from the !RecordSet. The populateForm method raises populateEvent when complete. ||